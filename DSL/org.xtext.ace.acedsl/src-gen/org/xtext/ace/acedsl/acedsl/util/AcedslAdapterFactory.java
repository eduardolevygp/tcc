/**
 * generated by Xtext 2.9.2
 */
package org.xtext.ace.acedsl.acedsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.ace.acedsl.acedsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.ace.acedsl.acedsl.AcedslPackage
 * @generated
 */
public class AcedslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AcedslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AcedslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AcedslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AcedslSwitch<Adapter> modelSwitch =
    new AcedslSwitch<Adapter>()
    {
      @Override
      public Adapter caseAplicativo(Aplicativo object)
      {
        return createAplicativoAdapter();
      }
      @Override
      public Adapter caseSeparacaoDisciplinas(SeparacaoDisciplinas object)
      {
        return createSeparacaoDisciplinasAdapter();
      }
      @Override
      public Adapter caseOrganizacaoCurso(OrganizacaoCurso object)
      {
        return createOrganizacaoCursoAdapter();
      }
      @Override
      public Adapter caseOrganizacaoDepartamento(OrganizacaoDepartamento object)
      {
        return createOrganizacaoDepartamentoAdapter();
      }
      @Override
      public Adapter caseSecaoEventos(SecaoEventos object)
      {
        return createSecaoEventosAdapter();
      }
      @Override
      public Adapter caseSecaoMembros(SecaoMembros object)
      {
        return createSecaoMembrosAdapter();
      }
      @Override
      public Adapter caseSecaoDisciplinas(SecaoDisciplinas object)
      {
        return createSecaoDisciplinasAdapter();
      }
      @Override
      public Adapter caseSecaoNoticias(SecaoNoticias object)
      {
        return createSecaoNoticiasAdapter();
      }
      @Override
      public Adapter caseEstilo(Estilo object)
      {
        return createEstiloAdapter();
      }
      @Override
      public Adapter caseListaCursos(ListaCursos object)
      {
        return createListaCursosAdapter();
      }
      @Override
      public Adapter caseListaDisciplinas(ListaDisciplinas object)
      {
        return createListaDisciplinasAdapter();
      }
      @Override
      public Adapter caseListaDepartamentos(ListaDepartamentos object)
      {
        return createListaDepartamentosAdapter();
      }
      @Override
      public Adapter caseListaPeriodos(ListaPeriodos object)
      {
        return createListaPeriodosAdapter();
      }
      @Override
      public Adapter caseCurso(Curso object)
      {
        return createCursoAdapter();
      }
      @Override
      public Adapter caseDepartamento(Departamento object)
      {
        return createDepartamentoAdapter();
      }
      @Override
      public Adapter casePeriodo(Periodo object)
      {
        return createPeriodoAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.Aplicativo <em>Aplicativo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.Aplicativo
   * @generated
   */
  public Adapter createAplicativoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.SeparacaoDisciplinas <em>Separacao Disciplinas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.SeparacaoDisciplinas
   * @generated
   */
  public Adapter createSeparacaoDisciplinasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.OrganizacaoCurso <em>Organizacao Curso</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.OrganizacaoCurso
   * @generated
   */
  public Adapter createOrganizacaoCursoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.OrganizacaoDepartamento <em>Organizacao Departamento</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.OrganizacaoDepartamento
   * @generated
   */
  public Adapter createOrganizacaoDepartamentoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.SecaoEventos <em>Secao Eventos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.SecaoEventos
   * @generated
   */
  public Adapter createSecaoEventosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.SecaoMembros <em>Secao Membros</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.SecaoMembros
   * @generated
   */
  public Adapter createSecaoMembrosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.SecaoDisciplinas <em>Secao Disciplinas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.SecaoDisciplinas
   * @generated
   */
  public Adapter createSecaoDisciplinasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.SecaoNoticias <em>Secao Noticias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.SecaoNoticias
   * @generated
   */
  public Adapter createSecaoNoticiasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.Estilo <em>Estilo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.Estilo
   * @generated
   */
  public Adapter createEstiloAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.ListaCursos <em>Lista Cursos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.ListaCursos
   * @generated
   */
  public Adapter createListaCursosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.ListaDisciplinas <em>Lista Disciplinas</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.ListaDisciplinas
   * @generated
   */
  public Adapter createListaDisciplinasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.ListaDepartamentos <em>Lista Departamentos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.ListaDepartamentos
   * @generated
   */
  public Adapter createListaDepartamentosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.ListaPeriodos <em>Lista Periodos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.ListaPeriodos
   * @generated
   */
  public Adapter createListaPeriodosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.Curso <em>Curso</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.Curso
   * @generated
   */
  public Adapter createCursoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.Departamento <em>Departamento</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.Departamento
   * @generated
   */
  public Adapter createDepartamentoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.ace.acedsl.acedsl.Periodo <em>Periodo</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.ace.acedsl.acedsl.Periodo
   * @generated
   */
  public Adapter createPeriodoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AcedslAdapterFactory
