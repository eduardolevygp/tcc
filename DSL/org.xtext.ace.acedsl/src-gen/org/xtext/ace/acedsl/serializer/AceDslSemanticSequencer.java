/*
 * generated by Xtext 2.9.2
 */
package org.xtext.ace.acedsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ace.acedsl.acedsl.AcedslPackage;
import org.xtext.ace.acedsl.acedsl.Aplicativo;
import org.xtext.ace.acedsl.acedsl.Curso;
import org.xtext.ace.acedsl.acedsl.Departamento;
import org.xtext.ace.acedsl.acedsl.Estilo;
import org.xtext.ace.acedsl.acedsl.ListaCursos;
import org.xtext.ace.acedsl.acedsl.ListaDepartamentos;
import org.xtext.ace.acedsl.acedsl.ListaDisciplinas;
import org.xtext.ace.acedsl.acedsl.ListaPeriodos;
import org.xtext.ace.acedsl.acedsl.Periodo;
import org.xtext.ace.acedsl.acedsl.SecaoDisciplinas;
import org.xtext.ace.acedsl.acedsl.SecaoEventos;
import org.xtext.ace.acedsl.acedsl.SecaoMembros;
import org.xtext.ace.acedsl.acedsl.SecaoNoticias;
import org.xtext.ace.acedsl.services.AceDslGrammarAccess;

@SuppressWarnings("all")
public class AceDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AceDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AcedslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AcedslPackage.APLICATIVO:
				sequence_Aplicativo(context, (Aplicativo) semanticObject); 
				return; 
			case AcedslPackage.CURSO:
				sequence_Curso(context, (Curso) semanticObject); 
				return; 
			case AcedslPackage.DEPARTAMENTO:
				sequence_Departamento(context, (Departamento) semanticObject); 
				return; 
			case AcedslPackage.ESTILO:
				sequence_Estilo(context, (Estilo) semanticObject); 
				return; 
			case AcedslPackage.LISTA_CURSOS:
				sequence_ListaCursos(context, (ListaCursos) semanticObject); 
				return; 
			case AcedslPackage.LISTA_DEPARTAMENTOS:
				sequence_ListaDepartamentos(context, (ListaDepartamentos) semanticObject); 
				return; 
			case AcedslPackage.LISTA_DISCIPLINAS:
				sequence_ListaDisciplinas(context, (ListaDisciplinas) semanticObject); 
				return; 
			case AcedslPackage.LISTA_PERIODOS:
				sequence_ListaPeriodos(context, (ListaPeriodos) semanticObject); 
				return; 
			case AcedslPackage.PERIODO:
				sequence_Periodo(context, (Periodo) semanticObject); 
				return; 
			case AcedslPackage.SECAO_DISCIPLINAS:
				sequence_SecaoDisciplinas(context, (SecaoDisciplinas) semanticObject); 
				return; 
			case AcedslPackage.SECAO_EVENTOS:
				sequence_SecaoEventos(context, (SecaoEventos) semanticObject); 
				return; 
			case AcedslPackage.SECAO_MEMBROS:
				sequence_SecaoMembros(context, (SecaoMembros) semanticObject); 
				return; 
			case AcedslPackage.SECAO_NOTICIAS:
				sequence_SecaoNoticias(context, (SecaoNoticias) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Aplicativo returns Aplicativo
	 *
	 * Constraint:
	 *     (
	 *         nome=EString 
	 *         (
	 *             url=EString | 
	 *             secaoEventos=SecaoEventos | 
	 *             secaoMembros=SecaoMembros | 
	 *             secaoDisciplinas=SecaoDisciplinas | 
	 *             secaoNoticias=SecaoNoticias | 
	 *             estilo=Estilo
	 *         )*
	 *     )
	 */
	protected void sequence_Aplicativo(ISerializationContext context, Aplicativo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Curso returns Curso
	 *
	 * Constraint:
	 *     (nome=EString organizacaoCurso=OrganizacaoCurso)
	 */
	protected void sequence_Curso(ISerializationContext context, Curso semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.CURSO__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.CURSO__NOME));
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.CURSO__ORGANIZACAO_CURSO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.CURSO__ORGANIZACAO_CURSO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCursoAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.accept(grammarAccess.getCursoAccess().getOrganizacaoCursoOrganizacaoCursoParserRuleCall_3_0(), semanticObject.getOrganizacaoCurso());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Departamento returns Departamento
	 *
	 * Constraint:
	 *     (nome=EString organizacaoDepartamento=OrganizacaoDepartamento)
	 */
	protected void sequence_Departamento(ISerializationContext context, Departamento semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.DEPARTAMENTO__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.DEPARTAMENTO__NOME));
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.DEPARTAMENTO__ORGANIZACAO_DEPARTAMENTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.DEPARTAMENTO__ORGANIZACAO_DEPARTAMENTO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDepartamentoAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.accept(grammarAccess.getDepartamentoAccess().getOrganizacaoDepartamentoOrganizacaoDepartamentoParserRuleCall_3_0(), semanticObject.getOrganizacaoDepartamento());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Estilo returns Estilo
	 *
	 * Constraint:
	 *     (logo=EString | fonte=Fonte | corPrimaria=EString | corSecundaria=EString | corTerciaria=EString)+
	 */
	protected void sequence_Estilo(ISerializationContext context, Estilo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeparacaoDisciplinas returns ListaCursos
	 *     OrganizacaoDepartamento returns ListaCursos
	 *     ListaCursos returns ListaCursos
	 *
	 * Constraint:
	 *     (curso+=Curso curso+=Curso*)
	 */
	protected void sequence_ListaCursos(ISerializationContext context, ListaCursos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeparacaoDisciplinas returns ListaDepartamentos
	 *     ListaDepartamentos returns ListaDepartamentos
	 *
	 * Constraint:
	 *     (departamento+=Departamento departamento+=Departamento*)
	 */
	protected void sequence_ListaDepartamentos(ISerializationContext context, ListaDepartamentos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeparacaoDisciplinas returns ListaDisciplinas
	 *     OrganizacaoCurso returns ListaDisciplinas
	 *     OrganizacaoDepartamento returns ListaDisciplinas
	 *     ListaDisciplinas returns ListaDisciplinas
	 *
	 * Constraint:
	 *     {ListaDisciplinas}
	 */
	protected void sequence_ListaDisciplinas(ISerializationContext context, ListaDisciplinas semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeparacaoDisciplinas returns ListaPeriodos
	 *     OrganizacaoCurso returns ListaPeriodos
	 *     OrganizacaoDepartamento returns ListaPeriodos
	 *     ListaPeriodos returns ListaPeriodos
	 *
	 * Constraint:
	 *     (periodo+=Periodo periodo+=Periodo*)
	 */
	protected void sequence_ListaPeriodos(ISerializationContext context, ListaPeriodos semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Periodo returns Periodo
	 *
	 * Constraint:
	 *     nome=EString
	 */
	protected void sequence_Periodo(ISerializationContext context, Periodo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.PERIODO__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.PERIODO__NOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPeriodoAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecaoDisciplinas returns SecaoDisciplinas
	 *
	 * Constraint:
	 *     (nome=EString separacaoDisciplinas=SeparacaoDisciplinas)
	 */
	protected void sequence_SecaoDisciplinas(ISerializationContext context, SecaoDisciplinas semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.SECAO_DISCIPLINAS__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.SECAO_DISCIPLINAS__NOME));
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.SECAO_DISCIPLINAS__SEPARACAO_DISCIPLINAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.SECAO_DISCIPLINAS__SEPARACAO_DISCIPLINAS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecaoDisciplinasAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.accept(grammarAccess.getSecaoDisciplinasAccess().getSeparacaoDisciplinasSeparacaoDisciplinasParserRuleCall_3_0(), semanticObject.getSeparacaoDisciplinas());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecaoEventos returns SecaoEventos
	 *
	 * Constraint:
	 *     nome=EString
	 */
	protected void sequence_SecaoEventos(ISerializationContext context, SecaoEventos semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.SECAO_EVENTOS__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.SECAO_EVENTOS__NOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecaoEventosAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecaoMembros returns SecaoMembros
	 *
	 * Constraint:
	 *     nome=EString
	 */
	protected void sequence_SecaoMembros(ISerializationContext context, SecaoMembros semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AcedslPackage.Literals.SECAO_MEMBROS__NOME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AcedslPackage.Literals.SECAO_MEMBROS__NOME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSecaoMembrosAccess().getNomeEStringParserRuleCall_1_0(), semanticObject.getNome());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SecaoNoticias returns SecaoNoticias
	 *
	 * Constraint:
	 *     (nome=EString Facebook=EString?)
	 */
	protected void sequence_SecaoNoticias(ISerializationContext context, SecaoNoticias semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
